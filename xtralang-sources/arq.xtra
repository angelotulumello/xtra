Register seq, lastAck, remoteSeq;

State initial init {
	seq = 1;

	setField(tcp.flags, 1, 2);
	setField(tcp.seqNo, 1, 0);
	setField(tcp.timestamp, 1, currentTime);
	setTimer(1, 1, 3000000);
	setNextState(syn);
}

State syn {
	on (timeout) {
		sendPacket(1, 1);
		setNextState(ack);
	}
}

State ack {
	on (pktRcvd){
		if (tcp.flags > 2, tcp.ackNo > lastAck) {
			lastAck = tcp.ackNo;
			remoteSeq = tcp.seqNo + 1;
			setField(tcp.flags, 1, 16);
			setField(tcp.ackNo, 1, remoteSeq);
			setField(tcp.seqNo, 1, seq);
			sendPacket(1, 1);

			setField(tcp.seqNo, 2, seq);
			setField(tcp.ackNo, 2, remoteSeq);
			setField(tcp.timestamp, 2, currentTime);
			sendPacket(2, 1);

			setNextState(arq);
		} 
	}
	on (timeout) {
		setNextState(init);
	}
}

State arq {
	on (pktRcvd) {
		if (tcp.flags > 2, tcp.ackNo >= lastAck) {
			seq = seq + 1448;
			setField(tcp.seqNo, 2, seq);
			setField(tcp.ackNo, 2, remoteSeq);
			setField(tcp.timestamp, 2, currentTime);
			sendPacket(2, 1);
		}
	}
}